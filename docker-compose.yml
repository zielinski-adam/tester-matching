version: '3.7'

# Define services
services:
  # test app frontend service
  tester-web:
    build: docker/tester-web
    image: tester-web:dev
    # Give the container the name tester-app. You can changes to something else.
    container_name: tester-web
    # Forward the exposed port 4200 on the container to port 8080 on the host machine
    ports:
      - "4200:4200"
    networks:
      - services_network
    # This service depends on postgres. Start that first.
    depends_on:
      - tester-app
  # test app backend service
  tester-app:
    build: docker/tester-app
    image: tester-app:dev
    # Give the container the name tester-app. You can changes to something else.
    container_name: tester-app
    # Forward the exposed port 8080 on the container to port 8080 on the host machine
    ports:
      - "8080:8080"
      - "5005:5005"
    networks:
      - services_network
    # This service depends on postgres. Start that first.
    depends_on:
      - db
    # Service health check
    healthcheck:
      test: curl -f http://tester-app:8080/actuator/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 2
  # Database Service (Postgres)
  db:
    # Use the Docker Image postgres. This will pull the 12 version.
    image: postgres:10-alpine
    # Give the container the name postgres-db. You can changes to something else.
    container_name: postgres-db
    restart: always
    # Set a volume some that database is not lost after shutting down the container.
    # I used the name postgres-data but you can changed it to something else.
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - services_network
    # Maps port 5432 (localhost) to port 5432 on the container. You can change the ports to fix your needs.
    ports:
      - "5432:5432"
    # Setup the username, password, and database name. You can changes these values.
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sampledb
      PGDATA: /var/lib/postgresql/data/pgdata
    # Service health check
    healthcheck:
      test: pg_isready -U postgres
      interval: 1m
      timeout: 10s
      retries: 2

networks:
  services_network:
    name: app
    driver: bridge

volumes:
  postgres-data:
